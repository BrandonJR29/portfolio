<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.1">Jekyll</generator><link href="/portfolio/feed.xml" rel="self" type="application/atom+xml" /><link href="/portfolio/" rel="alternate" type="text/html" /><updated>2022-11-28T10:18:23-04:00</updated><id>/portfolio/feed.xml</id><title type="html">Brandon J - Embedded Software Engineer</title><subtitle>Embedded Software Engineer | Electronic Engineer | IoT Engineer</subtitle><entry><title type="html">Maze out</title><link href="/portfolio/c++/coding_challenge/2022/11/25/Maze-out.html" rel="alternate" type="text/html" title="Maze out" /><published>2022-11-25T06:06:09-04:00</published><updated>2022-11-25T06:06:09-04:00</updated><id>/portfolio/c++/coding_challenge/2022/11/25/Maze-out</id><content type="html" xml:base="/portfolio/c++/coding_challenge/2022/11/25/Maze-out.html"><![CDATA[<p>TODO: Explain this</p>

<h2 id="dfs">DFS</h2>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;vector&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;string&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;tuple&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;stack&gt;</span><span class="cp">
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">MazeDfs</span>
<span class="p">{</span>
  <span class="nl">private:</span>
    <span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;&gt;</span> <span class="n">maze</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">limit_i</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">limit_j</span><span class="p">;</span>
    <span class="n">vector</span><span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">movements</span> <span class="o">=</span> <span class="p">{</span><span class="s">"left"</span><span class="p">,</span> <span class="s">"down"</span><span class="p">,</span> <span class="s">"right"</span><span class="p">,</span> <span class="s">"up"</span><span class="p">};</span>

    <span class="kt">int</span> <span class="n">is_valid</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="kt">int</span> <span class="n">j</span><span class="p">){</span>
      <span class="k">if</span><span class="p">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">limit_i</span> <span class="o">&amp;&amp;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">limit_j</span><span class="p">){</span>
        <span class="k">if</span><span class="p">(</span><span class="n">maze</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="sc">'1'</span><span class="p">){</span>
          <span class="k">return</span> <span class="mi">2</span><span class="p">;</span>
        <span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">maze</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="sc">' '</span><span class="p">){</span>
          <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
        <span class="p">}</span>
      <span class="p">}</span>
      <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
    <span class="p">}</span>

  <span class="nl">public:</span>

    <span class="n">MazeDfs</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;&gt;</span><span class="n">maze</span><span class="p">)</span><span class="o">:</span> <span class="n">maze</span><span class="p">(</span><span class="n">maze</span><span class="p">){</span>
      <span class="n">limit_i</span> <span class="o">=</span> <span class="n">maze</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
      <span class="n">limit_j</span> <span class="o">=</span> <span class="n">maze</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">size</span><span class="p">();</span>
    <span class="p">}</span>

    <span class="kt">int</span> <span class="n">solve</span><span class="p">(</span><span class="kt">int</span> <span class="n">pos_i</span><span class="p">,</span> <span class="kt">int</span> <span class="n">pos_j</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="n">tuple</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span><span class="kt">int</span><span class="o">&gt;&gt;&amp;</span> <span class="n">result_path</span><span class="p">,</span> <span class="n">string</span> <span class="n">prev_mov</span> <span class="o">=</span> <span class="s">""</span><span class="p">){</span>

      <span class="kt">int</span> <span class="n">path</span> <span class="o">=</span> <span class="n">is_valid</span><span class="p">(</span><span class="n">pos_i</span><span class="p">,</span> <span class="n">pos_j</span><span class="p">);</span>
      
      <span class="k">if</span><span class="p">(</span><span class="n">path</span> <span class="o">==</span> <span class="mi">2</span><span class="p">){</span>
        <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
      <span class="p">}</span>

      <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">k</span> <span class="o">&lt;</span> <span class="n">movements</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">k</span><span class="o">++</span><span class="p">){</span>
        
        <span class="n">string</span> <span class="n">mov</span><span class="p">;</span>
        <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">pos_i</span><span class="p">;</span>
        <span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">pos_j</span><span class="p">;</span>

        <span class="k">if</span><span class="p">(</span><span class="n">movements</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">==</span> <span class="s">"up"</span><span class="p">){</span>
          <span class="n">i</span> <span class="o">-=</span> <span class="mi">1</span><span class="p">;</span>
          <span class="n">mov</span> <span class="o">=</span> <span class="s">"up"</span><span class="p">;</span>
          <span class="k">if</span><span class="p">(</span><span class="n">prev_mov</span> <span class="o">==</span> <span class="s">"down"</span><span class="p">)</span> <span class="k">continue</span><span class="p">;</span>
        <span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">movements</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">==</span> <span class="s">"right"</span><span class="p">){</span>
          <span class="n">j</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>
          <span class="n">mov</span> <span class="o">=</span> <span class="s">"right"</span><span class="p">;</span>
          <span class="k">if</span><span class="p">(</span><span class="n">prev_mov</span> <span class="o">==</span> <span class="s">"left"</span><span class="p">)</span> <span class="k">continue</span><span class="p">;</span>
        <span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">movements</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">==</span> <span class="s">"down"</span><span class="p">){</span>
          <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>
          <span class="n">mov</span> <span class="o">=</span> <span class="s">"down"</span><span class="p">;</span>
          <span class="k">if</span><span class="p">(</span><span class="n">prev_mov</span> <span class="o">==</span> <span class="s">"up"</span><span class="p">)</span> <span class="k">continue</span><span class="p">;</span>
        <span class="p">}</span><span class="k">else</span><span class="p">{</span>
          <span class="n">j</span> <span class="o">-=</span> <span class="mi">1</span><span class="p">;</span>
          <span class="n">mov</span> <span class="o">=</span> <span class="s">"left"</span><span class="p">;</span>
          <span class="k">if</span><span class="p">(</span><span class="n">prev_mov</span> <span class="o">==</span> <span class="s">"right"</span><span class="p">)</span> <span class="k">continue</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="n">path</span> <span class="o">=</span> <span class="n">is_valid</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">);</span>

        <span class="k">if</span><span class="p">(</span><span class="n">path</span> <span class="o">==</span> <span class="mi">2</span> <span class="o">||</span> <span class="n">path</span> <span class="o">==</span> <span class="mi">1</span><span class="p">){</span>
          <span class="kt">int</span> <span class="n">result</span> <span class="o">=</span> <span class="n">solve</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">,</span> <span class="n">result_path</span> <span class="p">,</span> <span class="n">mov</span><span class="p">);</span>

          <span class="k">if</span><span class="p">(</span><span class="n">result</span> <span class="o">==</span> <span class="mi">1</span><span class="p">){</span>
            <span class="n">result_path</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">make_tuple</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">));</span>
            <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
          <span class="p">}</span>
        <span class="p">}</span>

      <span class="p">}</span>

      <span class="k">return</span> <span class="mi">0</span><span class="p">;</span> <span class="c1">// This path is unsuccessful</span>
    <span class="p">}</span>

    <span class="n">vector</span><span class="o">&lt;</span><span class="n">tuple</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span><span class="kt">int</span><span class="o">&gt;&gt;</span> <span class="n">solve</span><span class="p">(</span><span class="kt">int</span> <span class="n">pos_i</span><span class="p">,</span> <span class="kt">int</span> <span class="n">pos_j</span><span class="p">){</span>

      <span class="n">stack</span><span class="o">&lt;</span><span class="n">tuple</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span><span class="kt">int</span><span class="o">&gt;&gt;</span> <span class="n">st</span><span class="p">;</span>
      <span class="n">tuple</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;</span> <span class="n">visited</span><span class="p">[</span><span class="n">limit_i</span><span class="p">][</span><span class="n">limit_j</span><span class="p">];</span>
      <span class="n">tuple</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">maze_out</span><span class="p">;</span>
      <span class="n">vector</span><span class="o">&lt;</span><span class="n">tuple</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span><span class="kt">int</span><span class="o">&gt;&gt;</span> <span class="n">result_path</span><span class="p">;</span>

      <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">limit_i</span><span class="p">;</span> <span class="n">i</span> <span class="o">++</span><span class="p">){</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">limit_j</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">){</span>
          <span class="n">visited</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">make_tuple</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">);</span>
        <span class="p">}</span>
      <span class="p">}</span>

      <span class="n">st</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">make_tuple</span><span class="p">(</span><span class="n">pos_i</span><span class="p">,</span> <span class="n">pos_j</span><span class="p">));</span>
      <span class="n">visited</span><span class="p">[</span><span class="n">pos_i</span><span class="p">][</span><span class="n">pos_j</span><span class="p">]</span> <span class="o">=</span> <span class="n">make_tuple</span><span class="p">(</span><span class="n">pos_i</span><span class="p">,</span> <span class="n">pos_j</span><span class="p">);</span>

      <span class="k">while</span><span class="p">(</span><span class="o">!</span><span class="n">st</span><span class="p">.</span><span class="n">empty</span><span class="p">()){</span>

        <span class="n">tuple</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">current_pos</span> <span class="o">=</span> <span class="n">st</span><span class="p">.</span><span class="n">top</span><span class="p">();</span>
        <span class="n">st</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>

        <span class="kt">int</span> <span class="n">parent_i</span> <span class="o">=</span> <span class="n">get</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">&gt;</span><span class="p">(</span><span class="n">current_pos</span><span class="p">);</span>
        <span class="kt">int</span> <span class="n">parent_j</span> <span class="o">=</span> <span class="n">get</span><span class="o">&lt;</span><span class="mi">1</span><span class="o">&gt;</span><span class="p">(</span><span class="n">current_pos</span><span class="p">);</span>

        <span class="k">if</span><span class="p">(</span><span class="n">is_valid</span><span class="p">(</span><span class="n">parent_i</span><span class="p">,</span> <span class="n">parent_j</span><span class="p">)</span> <span class="o">==</span> <span class="mi">2</span><span class="p">){</span>
          <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Finish"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
          <span class="n">maze_out</span> <span class="o">=</span> <span class="n">current_pos</span><span class="p">;</span>
          <span class="k">break</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">k</span> <span class="o">&lt;</span> <span class="n">movements</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">k</span><span class="o">++</span><span class="p">){</span>

          <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">parent_i</span><span class="p">;</span>
          <span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">parent_j</span><span class="p">;</span>

          <span class="k">if</span><span class="p">(</span><span class="n">movements</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">==</span> <span class="s">"up"</span><span class="p">){</span>
            <span class="n">i</span> <span class="o">-=</span> <span class="mi">1</span><span class="p">;</span>
          <span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">movements</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">==</span> <span class="s">"right"</span><span class="p">){</span>
            <span class="n">j</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>
          <span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">movements</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">==</span> <span class="s">"down"</span><span class="p">){</span>
            <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>
          <span class="p">}</span><span class="k">else</span><span class="p">{</span>
            <span class="n">j</span> <span class="o">-=</span> <span class="mi">1</span><span class="p">;</span>
          <span class="p">}</span>

          <span class="k">if</span><span class="p">(</span><span class="n">is_valid</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">get</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">&gt;</span><span class="p">(</span><span class="n">visited</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">])</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">get</span><span class="o">&lt;</span><span class="mi">1</span><span class="o">&gt;</span><span class="p">(</span><span class="n">visited</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">])</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">){</span>
            <span class="n">st</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">make_tuple</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">));</span>
            <span class="n">get</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">&gt;</span><span class="p">(</span><span class="n">visited</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">])</span> <span class="o">=</span> <span class="n">parent_i</span><span class="p">;</span>
            <span class="n">get</span><span class="o">&lt;</span><span class="mi">1</span><span class="o">&gt;</span><span class="p">(</span><span class="n">visited</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">])</span> <span class="o">=</span> <span class="n">parent_j</span><span class="p">;</span>
          <span class="p">}</span>
        <span class="p">}</span>
      <span class="p">}</span>

      <span class="kt">int</span> <span class="n">m_i</span><span class="p">,</span> <span class="n">m_j</span><span class="p">;</span>

      <span class="k">while</span><span class="p">(</span><span class="mi">1</span><span class="p">){</span>
        <span class="n">m_i</span> <span class="o">=</span> <span class="n">get</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">&gt;</span><span class="p">(</span><span class="n">maze_out</span><span class="p">);</span>
        <span class="n">m_j</span> <span class="o">=</span> <span class="n">get</span><span class="o">&lt;</span><span class="mi">1</span><span class="o">&gt;</span><span class="p">(</span><span class="n">maze_out</span><span class="p">);</span>
        <span class="k">if</span><span class="p">(</span><span class="n">m_i</span> <span class="o">==</span> <span class="n">pos_i</span> <span class="o">&amp;&amp;</span> <span class="n">m_j</span> <span class="o">==</span> <span class="n">pos_j</span><span class="p">){</span>
          <span class="k">break</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="n">result_path</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">maze_out</span><span class="p">);</span>
        <span class="n">maze_out</span> <span class="o">=</span> <span class="n">visited</span><span class="p">[</span><span class="n">m_i</span><span class="p">][</span><span class="n">m_j</span><span class="p">];</span>
      <span class="p">}</span>

      <span class="k">return</span> <span class="n">result_path</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">};</span>

<span class="kt">int</span> <span class="n">main</span><span class="p">(){</span>

  <span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;&gt;</span> <span class="n">maze</span> <span class="o">=</span> <span class="p">{</span>
    <span class="p">{</span><span class="sc">'#'</span><span class="p">,</span> <span class="sc">'#'</span><span class="p">,</span> <span class="sc">'#'</span><span class="p">,</span> <span class="sc">'#'</span><span class="p">,</span> <span class="sc">'#'</span><span class="p">,</span> <span class="sc">' '</span><span class="p">,</span> <span class="sc">'#'</span><span class="p">},</span>
    <span class="p">{</span><span class="sc">'#'</span><span class="p">,</span> <span class="sc">' '</span><span class="p">,</span> <span class="sc">' '</span><span class="p">,</span> <span class="sc">'1'</span><span class="p">,</span> <span class="sc">'#'</span><span class="p">,</span> <span class="sc">' '</span><span class="p">,</span> <span class="sc">'#'</span><span class="p">},</span>
    <span class="p">{</span><span class="sc">'#'</span><span class="p">,</span> <span class="sc">' '</span><span class="p">,</span> <span class="sc">'#'</span><span class="p">,</span> <span class="sc">'#'</span><span class="p">,</span> <span class="sc">'#'</span><span class="p">,</span> <span class="sc">' '</span><span class="p">,</span> <span class="sc">'#'</span><span class="p">},</span>
    <span class="p">{</span><span class="sc">' '</span><span class="p">,</span> <span class="sc">' '</span><span class="p">,</span> <span class="sc">' '</span><span class="p">,</span> <span class="sc">' '</span><span class="p">,</span> <span class="sc">' '</span><span class="p">,</span> <span class="sc">' '</span><span class="p">,</span> <span class="sc">'#'</span><span class="p">}</span>
  <span class="p">};</span>

  <span class="n">MazeDfs</span> <span class="n">mdfs</span><span class="p">(</span><span class="n">maze</span><span class="p">);</span>
  <span class="n">vector</span><span class="o">&lt;</span><span class="n">tuple</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span><span class="kt">int</span><span class="o">&gt;&gt;</span> <span class="n">result</span><span class="p">;</span>
  <span class="n">result</span> <span class="o">=</span> <span class="n">mdfs</span><span class="p">.</span><span class="n">solve</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>

  <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">result</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">get</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">&gt;</span><span class="p">(</span><span class="n">result</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="o">&lt;&lt;</span> <span class="s">", "</span> <span class="o">&lt;&lt;</span> <span class="n">get</span><span class="o">&lt;</span><span class="mi">1</span><span class="o">&gt;</span><span class="p">(</span><span class="n">result</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="o">&lt;&lt;</span> <span class="s">" &lt;- "</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">get</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">&gt;</span><span class="p">(</span><span class="n">result</span><span class="p">[</span><span class="n">result</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">-</span> <span class="mi">1</span><span class="p">])</span> <span class="o">&lt;&lt;</span> <span class="s">", "</span> <span class="o">&lt;&lt;</span> <span class="n">get</span><span class="o">&lt;</span><span class="mi">1</span><span class="o">&gt;</span><span class="p">(</span><span class="n">result</span><span class="p">[</span><span class="n">result</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">-</span> <span class="mi">1</span><span class="p">])</span> <span class="o">&lt;&lt;</span> <span class="s">" &lt;- "</span><span class="p">;</span>
  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"3, 0"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="bfs">BFS</h2>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;vector&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;string&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;queue&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;tuple&gt;</span><span class="cp">
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">MazeBfs</span>
<span class="p">{</span>
  <span class="nl">private:</span>
    <span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;&gt;</span> <span class="n">maze</span><span class="p">;</span>
    <span class="n">tuple</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">maze_out</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">limit_i</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">limit_j</span><span class="p">;</span>
    <span class="n">vector</span><span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">movements</span> <span class="o">=</span> <span class="p">{</span><span class="s">"up"</span><span class="p">,</span> <span class="s">"right"</span><span class="p">,</span> <span class="s">"down"</span><span class="p">,</span> <span class="s">"left"</span><span class="p">};</span>

    <span class="kt">int</span> <span class="n">is_valid</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="kt">int</span> <span class="n">j</span><span class="p">){</span>
      <span class="k">if</span><span class="p">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">limit_i</span> <span class="o">&amp;&amp;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">limit_j</span><span class="p">){</span>
        <span class="k">if</span><span class="p">(</span><span class="n">maze</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="sc">'1'</span><span class="p">){</span>
          <span class="k">return</span> <span class="mi">2</span><span class="p">;</span>
        <span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">maze</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="sc">' '</span><span class="p">){</span>
          <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
        <span class="p">}</span>
      <span class="p">}</span>
      <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
    <span class="p">}</span>

  <span class="nl">public:</span>

    <span class="n">MazeBfs</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;&gt;</span><span class="n">maze</span><span class="p">)</span><span class="o">:</span> <span class="n">maze</span><span class="p">(</span><span class="n">maze</span><span class="p">){</span>
      <span class="n">limit_i</span> <span class="o">=</span> <span class="n">maze</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
      <span class="n">limit_j</span> <span class="o">=</span> <span class="n">maze</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">size</span><span class="p">();</span>
    <span class="p">}</span>

    <span class="n">vector</span><span class="o">&lt;</span><span class="n">tuple</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span><span class="kt">int</span><span class="o">&gt;&gt;</span> <span class="n">solve</span><span class="p">(</span><span class="kt">int</span> <span class="n">pos_i</span><span class="p">,</span> <span class="kt">int</span> <span class="n">pos_j</span><span class="p">){</span>

      <span class="n">queue</span><span class="o">&lt;</span><span class="n">tuple</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span><span class="kt">int</span><span class="o">&gt;&gt;</span> <span class="n">q</span><span class="p">;</span>
      <span class="n">vector</span><span class="o">&lt;</span><span class="n">tuple</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span><span class="kt">int</span><span class="o">&gt;&gt;</span> <span class="n">result_path</span><span class="p">;</span>
      <span class="kt">bool</span> <span class="n">finish</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
      <span class="n">tuple</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">visited</span><span class="p">[</span><span class="n">limit_i</span><span class="p">][</span><span class="n">limit_j</span><span class="p">];</span>

      <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">limit_i</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">limit_j</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">){</span>
          <span class="n">visited</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">make_tuple</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">);</span>
        <span class="p">}</span>
      <span class="p">}</span>


      <span class="n">q</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">make_tuple</span><span class="p">(</span><span class="n">pos_i</span><span class="p">,</span> <span class="n">pos_j</span><span class="p">));</span>
      <span class="n">get</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">&gt;</span><span class="p">(</span><span class="n">visited</span><span class="p">[</span><span class="n">pos_i</span><span class="p">][</span><span class="n">pos_j</span><span class="p">])</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
      <span class="n">get</span><span class="o">&lt;</span><span class="mi">1</span><span class="o">&gt;</span><span class="p">(</span><span class="n">visited</span><span class="p">[</span><span class="n">pos_i</span><span class="p">][</span><span class="n">pos_j</span><span class="p">])</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>

      <span class="k">while</span><span class="p">(</span><span class="o">!</span><span class="n">q</span><span class="p">.</span><span class="n">empty</span><span class="p">()</span> <span class="o">&amp;&amp;</span> <span class="o">!</span> <span class="n">finish</span><span class="p">){</span>

        <span class="n">tuple</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;</span> <span class="n">current_pos</span> <span class="o">=</span> <span class="n">q</span><span class="p">.</span><span class="n">front</span><span class="p">();</span>
        <span class="n">q</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>

        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">k</span> <span class="o">&lt;</span> <span class="n">movements</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">k</span><span class="o">++</span><span class="p">){</span>

          <span class="kt">int</span> <span class="n">parent_i</span> <span class="o">=</span> <span class="n">get</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">&gt;</span><span class="p">(</span><span class="n">current_pos</span><span class="p">);</span>
          <span class="kt">int</span> <span class="n">parent_j</span> <span class="o">=</span> <span class="n">get</span><span class="o">&lt;</span><span class="mi">1</span><span class="o">&gt;</span><span class="p">(</span><span class="n">current_pos</span><span class="p">);</span>

          <span class="k">if</span><span class="p">(</span><span class="n">is_valid</span><span class="p">(</span><span class="n">parent_i</span><span class="p">,</span> <span class="n">parent_j</span><span class="p">)</span> <span class="o">==</span> <span class="mi">2</span><span class="p">){</span>
            <span class="n">finish</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
            <span class="n">maze_out</span> <span class="o">=</span> <span class="n">make_tuple</span><span class="p">(</span><span class="n">parent_i</span><span class="p">,</span> <span class="n">parent_j</span><span class="p">);</span>
            <span class="k">break</span><span class="p">;</span>
          <span class="p">}</span>

          <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">parent_i</span><span class="p">,</span> <span class="n">j</span> <span class="o">=</span> <span class="n">parent_j</span><span class="p">;</span>

          <span class="k">if</span><span class="p">(</span><span class="n">movements</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">==</span> <span class="s">"up"</span><span class="p">){</span>
            <span class="n">i</span> <span class="o">-=</span> <span class="mi">1</span><span class="p">;</span>
          <span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">movements</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">==</span> <span class="s">"right"</span><span class="p">){</span>
            <span class="n">j</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>
          <span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">movements</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">==</span> <span class="s">"down"</span><span class="p">){</span>
            <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>
          <span class="p">}</span><span class="k">else</span><span class="p">{</span>
            <span class="n">j</span> <span class="o">-=</span> <span class="mi">1</span><span class="p">;</span>
          <span class="p">}</span>

          <span class="k">if</span><span class="p">(</span><span class="n">is_valid</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">get</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">&gt;</span><span class="p">(</span><span class="n">visited</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">])</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">get</span><span class="o">&lt;</span><span class="mi">1</span><span class="o">&gt;</span><span class="p">(</span><span class="n">visited</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">])</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)){</span>
            <span class="n">q</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">make_tuple</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">));</span>
            <span class="n">get</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">&gt;</span><span class="p">(</span><span class="n">visited</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">])</span> <span class="o">=</span> <span class="n">parent_i</span><span class="p">;</span>
            <span class="n">get</span><span class="o">&lt;</span><span class="mi">1</span><span class="o">&gt;</span><span class="p">(</span><span class="n">visited</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">])</span> <span class="o">=</span> <span class="n">parent_j</span><span class="p">;</span>
          <span class="p">}</span>

        <span class="p">}</span>

      <span class="p">}</span>

      <span class="kt">int</span> <span class="n">m_i</span><span class="p">,</span> <span class="n">m_j</span><span class="p">;</span>

      <span class="k">while</span><span class="p">(</span><span class="mi">1</span><span class="p">){</span>
        <span class="n">m_i</span> <span class="o">=</span> <span class="n">get</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">&gt;</span><span class="p">(</span><span class="n">maze_out</span><span class="p">);</span>
        <span class="n">m_j</span> <span class="o">=</span> <span class="n">get</span><span class="o">&lt;</span><span class="mi">1</span><span class="o">&gt;</span><span class="p">(</span><span class="n">maze_out</span><span class="p">);</span>

        <span class="k">if</span><span class="p">(</span><span class="n">m_i</span> <span class="o">==</span> <span class="n">pos_i</span> <span class="o">&amp;&amp;</span> <span class="n">m_j</span> <span class="o">==</span> <span class="n">pos_j</span><span class="p">)</span>
          <span class="k">break</span><span class="p">;</span>

        <span class="n">result_path</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">maze_out</span><span class="p">);</span>
        <span class="n">maze_out</span> <span class="o">=</span> <span class="n">visited</span><span class="p">[</span><span class="n">m_i</span><span class="p">][</span><span class="n">m_j</span><span class="p">];</span>
      <span class="p">}</span>

      <span class="k">return</span> <span class="n">result_path</span><span class="p">;</span>
    <span class="p">}</span>

<span class="p">};</span>

<span class="kt">int</span> <span class="n">main</span><span class="p">(){</span>

  <span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;&gt;</span> <span class="n">maze</span> <span class="o">=</span> <span class="p">{</span>
    <span class="p">{</span><span class="sc">'#'</span><span class="p">,</span> <span class="sc">'#'</span><span class="p">,</span> <span class="sc">'#'</span><span class="p">,</span> <span class="sc">'#'</span><span class="p">,</span> <span class="sc">'#'</span><span class="p">,</span> <span class="sc">' '</span><span class="p">,</span> <span class="sc">'#'</span><span class="p">},</span>
    <span class="p">{</span><span class="sc">'#'</span><span class="p">,</span> <span class="sc">' '</span><span class="p">,</span> <span class="sc">' '</span><span class="p">,</span> <span class="sc">' '</span><span class="p">,</span> <span class="sc">'#'</span><span class="p">,</span> <span class="sc">' '</span><span class="p">,</span> <span class="sc">'#'</span><span class="p">},</span>
    <span class="p">{</span><span class="sc">'#'</span><span class="p">,</span> <span class="sc">' '</span><span class="p">,</span> <span class="sc">'#'</span><span class="p">,</span> <span class="sc">'#'</span><span class="p">,</span> <span class="sc">'#'</span><span class="p">,</span> <span class="sc">' '</span><span class="p">,</span> <span class="sc">'#'</span><span class="p">},</span>
    <span class="p">{</span><span class="sc">' '</span><span class="p">,</span> <span class="sc">' '</span><span class="p">,</span> <span class="sc">'1'</span><span class="p">,</span> <span class="sc">' '</span><span class="p">,</span> <span class="sc">' '</span><span class="p">,</span> <span class="sc">' '</span><span class="p">,</span> <span class="sc">'#'</span><span class="p">}</span>
  <span class="p">};</span>

  <span class="n">MazeBfs</span> <span class="n">mdfs</span><span class="p">(</span><span class="n">maze</span><span class="p">);</span>
  <span class="n">vector</span><span class="o">&lt;</span><span class="n">tuple</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span><span class="kt">int</span><span class="o">&gt;&gt;</span> <span class="n">result</span><span class="p">;</span>
  <span class="n">result</span> <span class="o">=</span> <span class="n">mdfs</span><span class="p">.</span><span class="n">solve</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>

  <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">result</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">get</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">&gt;</span><span class="p">(</span><span class="n">result</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="o">&lt;&lt;</span> <span class="s">", "</span> <span class="o">&lt;&lt;</span> <span class="n">get</span><span class="o">&lt;</span><span class="mi">1</span><span class="o">&gt;</span><span class="p">(</span><span class="n">result</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="o">&lt;&lt;</span> <span class="s">" &lt;- "</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">get</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">&gt;</span><span class="p">(</span><span class="n">result</span><span class="p">[</span><span class="n">result</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">-</span> <span class="mi">1</span><span class="p">])</span> <span class="o">&lt;&lt;</span> <span class="s">", "</span> <span class="o">&lt;&lt;</span> <span class="n">get</span><span class="o">&lt;</span><span class="mi">1</span><span class="o">&gt;</span><span class="p">(</span><span class="n">result</span><span class="p">[</span><span class="n">result</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">-</span> <span class="mi">1</span><span class="p">])</span> <span class="o">&lt;&lt;</span> <span class="s">" &lt;- "</span><span class="p">;</span>
  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"3, 0"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>

<span class="p">}</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="C++" /><category term="Coding_Challenge" /><summary type="html"><![CDATA[TODO: Explain this]]></summary></entry></feed>